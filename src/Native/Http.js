var sanitize = function sanitize(record) {
    var spaces = Array.prototype.slice.call(arguments, 1);
    return spaces.reduce(function (r, space) {
        return (function () {
            r[space] ? void 0 : r[space] = {};
            return r[space];
        })();
    }, record);
};
var createServer = function createServer(http, Tuple2, Task) {
    return function (address) {
        return function () {
            var sendø1 = (address || 0)['_0'];
            var serverø1 = http.createServer(function (request, response) {
                return Task.perform(sendø1(Tuple2(request, response)));
            });
            return Task.asyncFunction(function (callback) {
                return callback(Task.succeed(serverø1));
            });
        }.call(this);
    };
};
var listen = function listen(Task) {
    return function (port, echo, server) {
        return Task.asyncFunction(function (callback) {
            return server.listen(port, function () {
                return (function () {
                    console.log(echo);
                    return callback(Task.succeed(server));
                })();
            });
        });
    };
};
var writeHead = function writeHead(Task) {
    return function (code, header, res) {
        return function () {
            var oø1 = {};
            return Task.asyncFunction(function (callback) {
                return (function () {
                    oø1[header._0] = header._1;
                    res.writeHead(code, oø1);
                    return callback(Task.succeed(res));
                })();
            });
        }.call(this);
    };
};
var write = function write(Task) {
    return function (message, res) {
        return Task.asyncFunction(function (callback) {
            return (function () {
                res.write(message);
                return callback(Task.succeed(res));
            })();
        });
    };
};
var end = function end(Task, Tuple0) {
    return function (res) {
        return Task.asyncFunction(function (callback) {
            return (function () {
                res.end();
                return callback(Task.succeed(Tuple0));
            })();
        });
    };
};
var make = function make(localRuntime) {
    return function () {
        var httpø1 = require('http');
        var Taskø1 = Elm.Native.Task.make(localRuntime);
        var Utilsø1 = Elm.Native.Utils.make(localRuntime);
        var Tuple0ø1 = (Utilsø1 || 0)['Tuple0'];
        var Tuple2ø1 = (Utilsø1 || 0)['Tuple2'];
        var noopø1 = function () {
            return void 0;
        };
        return (function () {
            sanitize(localRuntime, 'Native', 'Http');
            return function () {
                var vø1 = localRuntime.Native.Http.values;
                return vø1 ? vø1 : localRuntime.Native.Http.values = {
                    'createServer': createServer(httpø1, Tuple2ø1, Taskø1),
                    'listen': F3(listen(Taskø1)),
                    'writeHead': F3(writeHead(Taskø1)),
                    'write': F2(write(Taskø1)),
                    'end': end(Taskø1, Tuple0ø1),
                    'url': function (res) {
                        return (res || 0)['url'];
                    },
                    'method': function (res) {
                        return (res || 0)['method'];
                    },
                    'statusCode': function (res) {
                        return (res || 0)['statusCode'];
                    },
                    'emptyReq': {},
                    'emptyRes': {
                        'end': noopø1,
                        'write': noopø1,
                        'writeHead': noopø1
                    }
                };
            }.call(this);
        })();
    }.call(this);
};
sanitize(Elm, 'Native', 'Http');
Elm.Native.Http.make = make;
typeof(window) == 'undefined' ? window = global : void 0;
//# sourceMappingURL=data:application/json;base64,
